# This workflow will build a Java project with Maven, using the JFrog CLI to upload to Artifactory
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: "Maven - Build using JFrog CLI"
on:
  push:
    branches:
      - main
    paths-ignore:
      # - '.github/**'
      - 'target/**'
      - 'gradle/**'
      - 'k8s/**'
      - '.mvn/**'
      - '.devcontainer/**'
      - '.jfrog/**'
  pull_request:
    branches: [ main ]
  pull_request_target:
    types:
      - opened
      - synchronize
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  security-events: write # Required for uploading code scanning.
env:
  JAVA_PROVIDER: 'corretto'
  MAVEN_REPOSITORY: ${{ vars.MAVEN_REPOSITORY || "maven-virtual" }}
  JF_URL: ${{ vars.JF_URL || "https://${{ vars.JF_NAME }}.jfrog.io" }}
  JF_PROJECT: ${{ vars.JF_PROJECT || "" }}
  JF_OIDC_PROVIDER: ${{ vars.JF_OIDC_PROVIDER || "" }}
  JFROG_CLI_VERSION: ${{ vars.JFROG_CLI_VERSION || "latest" }}
  JFROG_CLI_LOG_TIMESTAMP: DATE_AND_TIME
  JFROG_CLI_LOG_LEVEL: DEBUG # DEBUG, INFO, WARN, ERROR
  # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context
  # JFROG_CLI_BUILD_ID: "${{github.actor}}-${{github.run_number}}"
  # JFROG_CLI_BUILD_NAME: ${{ github.repository }}
jobs:
  mavenPackage:
    name: MVN
    strategy:
      fail-fast: false
      matrix:
        os: 
          - ubuntu-latest
        java:
          - 17
    env:
      JOB_SUMMARY: false
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30 # https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idtimeout-minutes
    steps:
      # https://github.com/marketplace/actions/setup-jfrog-cli
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          # JFROG_CLI_RELEASES_REPO: '${{env.JF_RT_URL}}/artifactory/${{env.RT_REPO_MVN_VIRTUAL}}' 
          # JFROG_CLI_EXTRACTORS_REMOTE: '${{env.JF_RT_URL}}/artifactory/${{env.RT_REPO_MVN_VIRTUAL}}'
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          version: ${{ env.JFROG_CLI_VERSION }}
          oidc-provider-name: ${{ env.JF_OIDC_PROVIDER }}

      # https://github.com/actions/checkout
      - name: Clone Repository
        uses: actions/checkout@v4
      
      # https://github.com/actions/setup-java
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_PROVIDER }}
          java-version: ${{ matrix.java }}
          cache: 'maven'
          cache-dependency-path: 'pom.xml'

      - name: Software version
        run: |
          jf --version
          jf config show
          java -version
          mvn -version
          docker -v
          python3 -V
          pip3 -V
      
      - name: Ping Artifactory
        run: jf rt ping

      - name: Configure Maven to Resolve
        run: jf mvnc --global --repo-resolve-releases "$RT_REPO_MVN_VIRTUAL" --repo-resolve-snapshots "$RT_REPO_MVN_VIRTUAL"
      
      - name: Maven Clean and Install
        run: jf mvn clean install -DskipTests=true -Denforcer.skip=true

      - name: List Contents
        run: pwd; ls -lhat .
